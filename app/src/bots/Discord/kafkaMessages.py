from dotenv import load_dotenv, dotenv_values
import logging
import platform
from kafka import KafkaProducer, KafkaConsumer
import os
import time

load_dotenv(dotenv_path='../../.env')

config = dotenv_values(dotenv_path='../../.env')


logger = logging.getLogger("discord_bot")
logger.setLevel(logging.INFO)


global producer
global consumer
producer = KafkaProducer(
  bootstrap_servers=[config["KAFKA_BROKER_URL"]],
  sasl_mechanism='SCRAM-SHA-256',
  security_protocol='SASL_SSL',
  sasl_plain_username=config["SASL_PLAIN_USERNAME"],
  sasl_plain_password=config["SASL_PLAIN_PASSWORD"],
)

consumer = KafkaConsumer(
          bootstrap_servers=[config["KAFKA_BROKER_URL"]],
  sasl_mechanism='SCRAM-SHA-256',
  security_protocol='SASL_SSL',
  sasl_plain_username=config["SASL_PLAIN_USERNAME"],
  sasl_plain_password=config["SASL_PLAIN_PASSWORD"],
        auto_offset_reset='earliest',
        consumer_timeout_ms=1000
    )
    



## kafka compute operations: 
def kafka_producer_message(Xcoord: str, Ycoord: str, username: str, ipfsName):
    """
    transfers the message entered by the user from the discord input to the kafka broker queue destined for bacalhau container.
    message: the coordinates of the possition that the georender compute application will take as the parameter.
    """    
    
    time.sleep(5)
    result = producer.send(
        topic="bacalhau_compute_job",
        value=(Xcoord + ',' + Ycoord +',' + username + ',' + ipfsName).encode('utf-8'),
        )
    logger.log(msg="send the message to bacalhau service")
    print("Sending msg \"{},{}\"".format(Xcoord, Ycoord))
    print(result)
    
    return True

    
def kafka_consumer(username:str):
    """
    This function will be used to fetch the results generated by bacalhau."""
    pass
    #consumer.subscribe(['bacalhau_compute_job'])
        
    # for msg in consumer:
    #     print(msg)
    # producer.flush()
    # producer.close()
    # consumer.close()
