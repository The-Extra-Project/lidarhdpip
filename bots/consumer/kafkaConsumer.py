import platform
from kafka import  KafkaConsumer
from dotenv import load_dotenv, dotenv_values
import logging

import json

logger = logging.getLogger()
logger.setLevel(logging.INFO)
log = logging.getLogger("discord")


load_dotenv(dotenv_path='../../.env')
config = dotenv_values(dotenv_path='../../.env')

consumer: KafkaConsumer = KafkaConsumer(
          bootstrap_servers=[config["KAFKA_BROKER_URL"]],
  sasl_mechanism='SCRAM-SHA-256',
  security_protocol='SASL_SSL',
  sasl_plain_username=config["SASL_PLAIN_USERNAME"],
  sasl_plain_password=config["SASL_PLAIN_PASSWORD"],
        auto_offset_reset='earliest',
        consumer_timeout_ms=1000
)
    
def kafka_consume_message_jobResult(self,topic: str = 'bacalau_result_job', username: str = "") -> list(str):
    """
    this allows for messages to be consumed that is shared by the bacalhau bot, storing the response of the given user
    
    topic: its the corresponding topic from bacalhau to consume from.
    username: is the discord username , which is added as the unique identifier for the topic. 
    """
    consumer.subscribe(topic) 
    logger.info('now fetching the response of username provided by the user')
    ## only consider last message for consuming for bacalhau 
    
    for message in consumer:
        if(message[username].key == username):
            current_message_offset = message[username].value
            break
        
    consumer.seek(partition=topic, offset=current_message_offset)
    
    parameters = json.loads(consumer.poll(topic))
 
    print("results of given job is:{}".format(parameters))
    ## fetching the result.
    return parameters

def kafka_consume_list_jobs(username: str):
    topic = 'bacalhau_compute_job'
    
    consumer.subscribe(topic) 
    logger.info('fetching the current jobs generated by the user')
    
    for message in consumer:
        if(message[username].key == username):
            current_message_offset = message[username].value
            break
        
    consumer.seek(partition=topic, offset=current_message_offset)
    
    parameters = json.loads(consumer.poll(topic))
    
    return parameters    
    
