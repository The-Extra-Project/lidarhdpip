stages:
  - üêç lint
  - ü§û test
  - üöÄ deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

.pre-commit-check:
  image:
    name: python:3.10
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  cache:
    - paths:
      - ${PRE_COMMIT_HOME}
    - paths:
      - ${PIP_CACHE_DIR}
  before_script:
    - pip install pre-commit
    - pre-commit install -c .pre-commit-config.yaml
  only:
    refs:
      - merge_requests
      - develop
      - tags
      - master

# -- LINT JOBS --------------------------------------------------------------------------
flake8:
  extends: .pre-commit-check
  stage: üêç lint
  script:
    - pre-commit run --show-diff-on-failure --all-files black
  only:
    changes:
      - "**/*.py"

autoflake:
  extends: .pre-commit-check
  stage: üêç lint
  script: pre-commit run --show-diff-on-failure --all-files autoflake
  only:
    changes:
      - "**/*.py"

pyupgrade:
  extends: .pre-commit-check
  stage: üêç lint
  script: pre-commit run --show-diff-on-failure --all-files pyupgrade
  only:
    changes:
      - "**/*.py"

pre-commit-built-in:
  extends: .pre-commit-check
  stage: üêç lint
  script:
    - pre-commit run --show-diff-on-failure --all-files trailing-whitespace
    - pre-commit run --show-diff-on-failure --all-files end-of-file-fixer
    - pre-commit run --show-diff-on-failure --all-files check-added-large-files

typing-check:
  stage: üêç lint
  image:
    name: python:3.10-slim
  cache:
    - key: $CI_COMMIT_REF_NAME
      paths:
        - .mypy_cache/
    - paths:
      - ${PIP_CACHE_DIR}
  before_script:
    - pip install .[dev]
  script:
    - mypy
  only:
    refs:
      - merge_requests
      - develop
      - tags
      - master
    changes:
      - "**/*.py"

lint-commit:
  stage: üêç lint
  image:
    name: python:3.10
  cache:
    - paths:
      - ${PIP_CACHE_DIR}
  before_script:
    - pip install commitizen
  script:
    - cz check --rev-range $CI_MERGE_REQUEST_DIFF_BASE_SHA..HEAD
  only:
    refs:
      - merge_requests

# -- TEST JOBS --------------------------------------------------------------------------
test:
  stage: ü§û test
  image:
    name: python:$PYTHON_VERSION-slim
  cache:
    - paths:
      - ${PIP_CACHE_DIR}
  before_script:
    - pip install -U pip setuptools
    - pip install .[dev]
  script:
    - pytest
    # TODO move that in unit tests
    - py3dtiles info tests/fixtures/pointCloudRGB.pnts
  artifacts:
    when: always
    paths:
      - coverage.xml
      - junit/test-results.xml
    reports:
      junit: junit/test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  only:
    refs:
      - merge_requests
      - develop
      - tags
      - master
    changes:
      - "**/*.py"
  parallel:
    matrix:
      - PYTHON_VERSION: ['3.8', '3.9', '3.10']

windows-test:
  stage: ü§û test
  tags:
    - windows
  before_script:
    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
    - choco install -y python --version=3.9.5
    - RefreshEnv
    - python -m pip install --upgrade pip setuptools wheel
    - python -m pip install .[dev]
  script:
    - pytest
    - py3dtiles info tests/fixtures/pointCloudRGB.pnts
  only:
    refs:
      - tags
      - master

3d-tiles-validator:
  stage: ü§û test
  image:
    name: node:18
  cache:
    - key: 3d-tiles-validator
      paths:
        - laz/
    - paths:
      - ${PIP_CACHE_DIR}
  before_script:
    - apt update
    - apt install -y python3-pip liblaszip8
    - pip install -U pip setuptools
    - pip install .
    - pip install laspy[laszip]
    - wget -nv -N -P laz https://download.data.grandlyon.com/files/grandlyon/imagerie/mnt2018/lidar/laz/1843_5175.laz
    - wget -nv -N -P laz https://download.data.grandlyon.com/files/grandlyon/imagerie/mnt2018/lidar/laz/1845_5173.laz
    - git clone --depth 1 https://github.com/CesiumGS/3d-tiles-validator
    - cd 3d-tiles-validator
    - npm install
    - mkdir tilesets
  script:
    # Convert the 2 las files
    - py3dtiles convert ../laz/1843_5175.laz --out tilesets/1
    - py3dtiles convert ../laz/1845_5173.laz --out tilesets/2
    # Validate the first one
    - npx ts-node src/main.ts --tilesetsDirectory tilesets/1 | tee validator-output.txt
    - grep \"numErrors\"\:\ 0 validator-output.txt | wc -l | grep 4
    - grep \"numWarnings\"\:\ 0 validator-output.txt | wc -l | grep 4
    # Validate the second one to be sure the 2 las are valid
    - npx ts-node src/main.ts --tilesetsDirectory tilesets/2 | tee validator-output.txt
    - grep \"numErrors\"\:\ 0 validator-output.txt | wc -l | grep 1
    - grep \"numWarnings\"\:\ 0 validator-output.txt | wc -l | grep 1
    # Merge the 2 tilesets and validate the result
    - py3dtiles merge tilesets/1/tileset.json tilesets/2/tileset.json --output-tileset tilesets/tileset.json
    - npx ts-node src/main.ts --tilesetsDirectory tilesets | tee validator-output.txt
    - grep \"numErrors\"\:\ 0 validator-output.txt | wc -l | grep 6
    - grep \"numWarnings\"\:\ 0 validator-output.txt | wc -l | grep 6
  only:
    refs:
      - merge_requests
      - develop
      - tags
      - master
    changes:
      - "**/*.py"

test-api-doc-examples:
  stage: ü§û test
  image:
    name: python:3.10-slim
  cache:
    - paths:
      - ${PIP_CACHE_DIR}
  before_script:
    - pip install .
  script:
    - python tests/test_code_examples.py
  only:
    refs:
      - merge_requests
      - develop
      - tags
      - master

docker-build:
  stage: üöÄ deploy
  tags:
    - linux_vm
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  script:
    - docker build . -t $IMAGE_TAG -f docker/Dockerfile
    - mkdir data
    - cp tests/fixtures/simple.ply data
    # Sanity check: convert then check if there is the right amount of points in the tileset
    - docker run --rm
        --mount type=bind,source="$(pwd)"/data,target=/app/data/
        $IMAGE_TAG convert simple.ply
    - docker run
        --rm
        --mount type=bind,source="$(pwd)"/data,target=/app/data/
        --entrypoint=python3
        $IMAGE_TAG
        -c "from py3dtiles.tileset.utils import number_of_points_in_tileset;from pathlib import Path;exit(number_of_points_in_tileset(Path('3dtiles/tileset.json')) != 22300);"
    # push the image
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $IMAGE_TAG
  only:
    refs:
      - tags

sonarcloud-check:
  stage: ü§û test
  needs: [test]
  image:
    name: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    refs:
      - merge_requests
      - develop
      - tags
      - master
    changes:
      - "**/*.py"

# -- DEPLOY JOBS -------------------------------------------------------------------------
pages:
  stage: üöÄ deploy
  image: python:3.10
  script:
    - pip install .[doc]
    # sphinx-multiversion needs to have all the branches
    - git fetch
    - sphinx-multiversion docs public
    - cp -rv docs/index_redirect.html public/index.html
    - current_version="$(git tag --list | tail -n1)"
    - sed -i "s/VERSION/$current_version/g" public/index.html
  artifacts:
    paths:
      - public
  only:
    - master
    - tags
