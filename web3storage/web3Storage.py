# SPDX-License-Identifier: GPL-2.0-or-later
"""
this script consumes the requests from the queue and executes the related query
the message is divided into follows: 



for uploading the files:
topic : web3-storage.
key:  the category of file that user wants to access (one of "user-storage" or "georender-storage" )
value: this corresponds to the parameters based on the type of key: 
    - for "user-storage":


for reading the details
topic : web3-storage.
key:  the category of file that user wants to access (one of "user-storage" or "georender-storage" )
value: this corresponds to the parameters based on the type of key: 
    - for "user-storage": "filename" and "username"
    - for "georender-storage": "filename of shp file"
"""

import datetime
import requests
from dotenv import load_dotenv
from fastapi import FastAPI
from confluent_kafka import Consumer, Producer, KafkaException
from kafka.kafka_config import read_app_config, read_ccloud_config
import w3storage
import os
from typing import List
import uvicorn


load_dotenv()


app = FastAPI()

APP_CONFIG = read_app_config("../kafka/config_status.ini")

storagetoken = w3storage.API(token=os.getenv("WEB3_TOKEN"))

config = read_ccloud_config("../kafka/client.properties")


@app.on_event("startup")
async def startup_event():
    global producer, consumer
    producer = Producer(config)
    consumer = Consumer(config)


@app.post("/api/web3-storage/upload")
def produce_file_upload_message(
    key: str,
    value: List[str]
):
    """
    function for producing the kafka message for storing the files 
    :param key: can either of the following value : user-storage or georender-storage
    value are the corresponding inputs.
    
    """
    try:
        producer.produce(topic=APP_CONFIG["kafka_topic"]["web3storage"], key=key, value=value)
        
    except KafkaException as e:
        print(f"Exception occured while producing the message: {e}")
    finally:
        producer.flush()



@app.get("/api/web3-storage/upload-consume")
def upload_consumer_file():
    """
    this will consume the message and then upload the file to the web3-storage
    """    
    consumer.subscribe(APP_CONFIG["kafka_topic"]["web3storage"])
    ## currently try to fetch for 5 sec
    while True:
        try:
            input_message = consumer.poll(2.0)
            if input_message is None:
                continue
            else:
                if input_message.key() == "user-storage":
                    username = input_message.value[0]
                    filename = input_message.value[1]
                    storagetoken.post_upload(username)
                elif input_message.key() == "georender-storage":
                    filename = input_message.value[0]
                else: break
            print("user"+ {username}+ "uploading the "+ {filename})
            storagetoken.post_upload(files=filename)
        
        except KafkaException as e:
            print(f"Exception occured while consuming the message: {e}")
        finally:
            consumer.commit()
            
@app.post("/api/web3-storage/read")
def produce_file_read_message(
    key: str,
    value: List[str]
):
    """
    creates the kafka message for fetching the file
    """   
    try:
        producer.produce(topic=APP_CONFIG["kafka_topic"]["web3storage"], key=key, value=value) 
    except KafkaException as e:  
        print(e)  
    finally:
        producer.flush()
        



def read_consumer_file(
):
    """
    this will consume the message and then upload the file to the web3-storage
    """    
    consumer.subscribe(APP_CONFIG["kafka_topic"]["web3storage-write"])
    ## currently try to fetch for 5 sec
    while True:
        try:
            input_message = consumer.poll(2.0)
            if input_message is None:
                continue
            else:
                if input_message.key() == "user-storage":
                    username = input_message.value[0]
                    cid = input_message.value[1]
                    storagetoken.post_upload(username)
                elif input_message.key() == "georender-storage":
                    cid = input_message.value[0]
                else: break
            filerequest = (requests.get(cid)).content  
            return filerequest
        
        except KafkaException as e:
            print(f"Exception occured while consuming the message: {e}")
        finally:
            consumer.commit()
    
    






# def receive_upload_request():
#     """
#     this function subscribes to the requests generated by the user, and then decodes and interacts with the web3-storage
#     """
    
#     Consumer.consumer()

if __name__ == "__main__":
    uvicorn.run(app,host="127.0.0.1", port=8002)    







